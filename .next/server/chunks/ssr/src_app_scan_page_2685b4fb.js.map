{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/redaj/my-next-website/src/app/scan/page.js"],"sourcesContent":["// src/app/scan/page.js\r\n\"use client\";\r\n\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  addDoc,\r\n  updateDoc,\r\n  doc,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"@/firebase/firebase\";\r\n\r\n// ------------------------------\r\n// Helper Functions\r\n// ------------------------------\r\n\r\n// Function to look up product details using UPCitemdb API via a POST request.\r\n// (For production, consider moving this to an API route to bypass CORS issues.)\r\nasync function lookupProduct(barcode) {\r\n  try {\r\n    const response = await fetch(\"https://api.upcitemdb.com/prod/trial/lookup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ upc: barcode }),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(\"Product lookup failed: \" + response.statusText);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching product details:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Function to update Firestore inventory. It searches for an existing document by barcode,\r\n// and either increments the quantity or creates a new document.\r\nasync function updateInventory(scannedBarcode, productName = \"New Product\") {\r\n  try {\r\n    const q = query(\r\n      collection(db, \"inventoryItems\"),\r\n      where(\"barcode\", \"==\", scannedBarcode)\r\n    );\r\n    const querySnapshot = await getDocs(q);\r\n    if (querySnapshot.empty) {\r\n      const docRef = await addDoc(collection(db, \"inventoryItems\"), {\r\n        name: productName,\r\n        barcode: scannedBarcode,\r\n        quantity: 1,\r\n      });\r\n      console.log(\"New product added with ID:\", docRef.id);\r\n      toast.success(\"New product added to inventory\");\r\n    } else {\r\n      querySnapshot.forEach(async (docSnapshot) => {\r\n        const currentQuantity = docSnapshot.data().quantity || 0;\r\n        await updateDoc(doc(db, \"inventoryItems\", docSnapshot.id), {\r\n          quantity: currentQuantity + 1,\r\n        });\r\n        toast.success(\"Product quantity updated\");\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error updating inventory:\", error);\r\n    toast.error(\"Error updating inventory: \" + error.message);\r\n  }\r\n}\r\n\r\n// ------------------------------\r\n// Main Component\r\n// ------------------------------\r\n\r\nexport default function ScanPage() {\r\n  const [scannedCode, setScannedCode] = useState(\"\");\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [useWebcam, setUseWebcam] = useState(false);\r\n  const videoRef = useRef(null);\r\n\r\n  // Load Quagga dynamically using an async function and then initialize it.\r\n  useEffect(() => {\r\n    // Only run if webcam scanning is enabled\r\n    if (useWebcam && videoRef.current) {\r\n      // Check if getUserMedia is supported\r\n      if (\r\n        !navigator.mediaDevices ||\r\n        typeof navigator.mediaDevices.getUserMedia !== \"function\"\r\n      ) {\r\n        toast.error(\r\n          \"getUserMedia is not supported in this browser. Use HTTPS or localhost.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Dynamically load Quagga (the original package)\r\n      import(\"quagga\")\r\n        .then((module) => {\r\n          const QuaggaModule = module.default || module;\r\n          if (typeof QuaggaModule.init !== \"function\") {\r\n            throw new Error(\"Quagga module did not load correctly.\");\r\n          }\r\n\r\n          // Initialize Quagga with settings\r\n          QuaggaModule.init(\r\n            {\r\n              inputStream: {\r\n                name: \"Live\",\r\n                type: \"LiveStream\",\r\n                target: videoRef.current,\r\n                constraints: {\r\n                  width: 640,\r\n                  height: 480,\r\n                  facingMode: \"environment\", // Use rear camera if available\r\n                },\r\n              },\r\n              decoder: {\r\n                readers: [\"code_128_reader\", \"ean_reader\", \"ean_8_reader\"],\r\n              },\r\n            },\r\n            (err) => {\r\n              if (err) {\r\n                console.error(\"Quagga init error:\", err);\r\n                toast.error(\"Error initializing scanner: \" + err.message);\r\n                return;\r\n              }\r\n              QuaggaModule.start();\r\n            }\r\n          );\r\n\r\n          // Listen for detected barcodes\r\n          QuaggaModule.onDetected(async (result) => {\r\n            const code = result.codeResult.code;\r\n            setScannedCode(code);\r\n            toast.success(\"Barcode detected: \" + code);\r\n\r\n            // Look up product details using the external API\r\n            const productData = await lookupProduct(code);\r\n            if (\r\n              productData &&\r\n              productData.items &&\r\n              productData.items.length > 0 &&\r\n              productData.items[0].title\r\n            ) {\r\n              const title = productData.items[0].title;\r\n              setProductName(title);\r\n              toast.success(`Product found: ${title}`);\r\n              updateInventory(code, title);\r\n            } else {\r\n              setProductName(\"New Product\");\r\n              toast.info(\"Product details not found. Using default name.\");\r\n              updateInventory(code, \"New Product\");\r\n            }\r\n          });\r\n\r\n          // Cleanup on unmount or when webcam is disabled\r\n          return () => {\r\n            if (QuaggaModule && typeof QuaggaModule.stop === \"function\") {\r\n              QuaggaModule.offDetected && QuaggaModule.offDetected();\r\n              QuaggaModule.stop();\r\n            }\r\n          };\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error loading Quagga:\", error);\r\n          toast.error(\"Failed to load scanner library.\");\r\n        });\r\n    }\r\n  }, [useWebcam, videoRef.current]);\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-4 bg-gray-50\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">Scan Product</h1>\r\n      <div className=\"mb-4\">\r\n        <label className=\"mr-2\">Use Webcam:</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={useWebcam}\r\n          onChange={(e) => setUseWebcam(e.target.checked)}\r\n        />\r\n      </div>\r\n      {useWebcam ? (\r\n        <div>\r\n          <div ref={videoRef} className=\"w-80 h-60 bg-black\" />\r\n          <p className=\"mt-2\">\r\n            Scanned Barcode: <span className=\"font-mono\">{scannedCode}</span>\r\n          </p>\r\n          <p className=\"mt-1\">\r\n            Product Name: <span className=\"font-semibold\">{productName}</span>\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Scan input (Keyboard Wedge Mode)\"\r\n            value={scannedCode}\r\n            onChange={(e) => setScannedCode(e.target.value)}\r\n            className=\"p-2 border rounded\"\r\n          />\r\n          <p className=\"mt-2\">Barcode Value: {scannedCode}</p>\r\n          <p className=\"mt-1\">Product Name: {productName}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}