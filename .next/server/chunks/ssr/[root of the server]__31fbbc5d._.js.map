{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/redaj/my-next-website/src/app/scan/sell/page.js"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { collection, getDocs, updateDoc } from \"firebase/firestore\";\r\nimport { db } from \"@/firebase/firebaseConfig\"; // Ensure firebaseConfig.js exports { db }\r\nimport Quagga from \"quagga\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ScanSellPage = () => {\r\n  // Current scanned product details\r\n  const [barcode, setBarcode] = useState(\"\");\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [availableQuantity, setAvailableQuantity] = useState(0);\r\n  const [pricePerUnit, setPricePerUnit] = useState(0); // from Firestore: \"price per unit\"\r\n  const [sellQuantity, setSellQuantity] = useState(1);\r\n  const [currentDocRef, setCurrentDocRef] = useState(null);\r\n\r\n  // UI states\r\n  const [scanned, setScanned] = useState(false);\r\n  const [confirmVisible, setConfirmVisible] = useState(false); // modal for current scanned product\r\n  const [cart, setCart] = useState([]); // persistent cart\r\n  const [receiptVisible, setReceiptVisible] = useState(false);\r\n  const [receiptData, setReceiptData] = useState(null);\r\n\r\n  // Override console.error to suppress errors containing \"reading 'data'\"\r\n  useEffect(() => {\r\n    const originalConsoleError = console.error;\r\n    console.error = (...args) => {\r\n      if (\r\n        args[0] &&\r\n        typeof args[0] === \"string\" &&\r\n        args[0].includes(\"reading 'data'\")\r\n      ) {\r\n        return;\r\n      }\r\n      originalConsoleError(...args);\r\n    };\r\n    return () => {\r\n      console.error = originalConsoleError;\r\n    };\r\n  }, []);\r\n\r\n  // Initialize Quagga scanner\r\n  useEffect(() => {\r\n    const scannerContainer = document.getElementById(\"barcode-scanner-sell\");\r\n    if (!scannerContainer) return;\r\n    if (!scanned) {\r\n      Quagga.init(\r\n        {\r\n          inputStream: {\r\n            type: \"LiveStream\",\r\n            target: scannerContainer,\r\n            constraints: { width: 640, height: 480, facingMode: \"environment\" },\r\n          },\r\n          decoder: { readers: [\"ean_reader\", \"code_128_reader\"] },\r\n        },\r\n        (err) => {\r\n          if (err) {\r\n            console.error(\"Quagga init error:\", err);\r\n            toast.error(\"Error initializing scanner: \" + err.message);\r\n            return;\r\n          }\r\n          Quagga.start();\r\n        }\r\n      );\r\n      Quagga.onDetected(async (result) => {\r\n        try {\r\n          const scannedCode = result.codeResult.code;\r\n          if (!scanned) {\r\n            setBarcode(scannedCode);\r\n            setScanned(true);\r\n            Quagga.stop();\r\n            // Fetch product details from Firestore \"inventory\"\r\n            const productsRef = collection(db, \"inventory\");\r\n            const querySnapshot = await getDocs(productsRef);\r\n            let found = false;\r\n            querySnapshot.forEach((docSnapshot) => {\r\n              const data = docSnapshot.data();\r\n              if (data && data.barcode === scannedCode) {\r\n                setProductName(data.productName || \"Unknown Product\");\r\n                setAvailableQuantity(data.quantity || 0);\r\n                setPricePerUnit(data[\"price per unit\"] || 0);\r\n                setCurrentDocRef(docSnapshot.ref);\r\n                found = true;\r\n              }\r\n            });\r\n            if (!found) {\r\n              toast.error(\"Product not found in inventory!\");\r\n              setProductName(\"Unknown Product\");\r\n              setAvailableQuantity(0);\r\n              setPricePerUnit(0);\r\n              setCurrentDocRef(null);\r\n            }\r\n            setConfirmVisible(true);\r\n          }\r\n        } catch (error) {\r\n          console.warn(\"Error in onDetected handler:\", error);\r\n        }\r\n      });\r\n    }\r\n    return () => {\r\n      Quagga.offDetected();\r\n      Quagga.stop();\r\n    };\r\n  }, [scanned]);\r\n\r\n  // Reset the current scanned product state (but not the cart)\r\n  const resetCurrentProduct = () => {\r\n    setBarcode(\"\");\r\n    setProductName(\"\");\r\n    setAvailableQuantity(0);\r\n    setPricePerUnit(0);\r\n    setSellQuantity(1);\r\n    setCurrentDocRef(null);\r\n    setConfirmVisible(false);\r\n    setScanned(false);\r\n    Quagga.start();\r\n  };\r\n\r\n  // Reset the entire page for new operations (clears cart as well)\r\n  const resetPage = () => {\r\n    setBarcode(\"\");\r\n    setProductName(\"\");\r\n    setAvailableQuantity(0);\r\n    setPricePerUnit(0);\r\n    setSellQuantity(1);\r\n    setCurrentDocRef(null);\r\n    setScanned(false);\r\n    setConfirmVisible(false);\r\n    setCart([]);\r\n    setReceiptVisible(false);\r\n    setReceiptData(null);\r\n    Quagga.start();\r\n  };\r\n\r\n  // Process sale immediately for the current product\r\n  const handleConfirmSale = async () => {\r\n    if (!barcode || !currentDocRef) {\r\n      toast.error(\"Invalid product details. Please scan again.\");\r\n      return;\r\n    }\r\n    if (sellQuantity <= 0 || sellQuantity > availableQuantity) {\r\n      toast.error(\"Enter a valid quantity to sell.\");\r\n      return;\r\n    }\r\n    try {\r\n      const newQuantity = availableQuantity - sellQuantity;\r\n      await updateDoc(currentDocRef, { quantity: newQuantity });\r\n      \r\n      // Build receipt data for single product sale\r\n      const receipt = {\r\n        products: [\r\n          {\r\n            productName,\r\n            sellQuantity,\r\n            price: pricePerUnit,\r\n            subtotal: sellQuantity * pricePerUnit,\r\n          },\r\n        ],\r\n        total: sellQuantity * pricePerUnit,\r\n        timestamp: new Date(),\r\n      };\r\n      setReceiptData(receipt);\r\n      setReceiptVisible(true);\r\n      toast.success(\"Sale completed successfully!\");\r\n      setTimeout(resetPage, 3000); // return to start after 3 seconds\r\n    } catch (error) {\r\n      console.error(\"Error processing sale:\", error);\r\n      toast.error(\"Error processing sale: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Add the current product to the cart (cart is preserved)\r\n  const handleAddToCart = () => {\r\n    if (!barcode || !currentDocRef) {\r\n      toast.error(\"Invalid product details. Please scan again.\");\r\n      return;\r\n    }\r\n    if (sellQuantity <= 0 || sellQuantity > availableQuantity) {\r\n      toast.error(\"Enter a valid quantity to add.\");\r\n      return;\r\n    }\r\n    setCart((prevCart) => {\r\n      const index = prevCart.findIndex((item) => item.barcode === barcode);\r\n      if (index >= 0) {\r\n        const updatedItem = { ...prevCart[index] };\r\n        if (updatedItem.sellQuantity + sellQuantity > availableQuantity) {\r\n          toast.error(\"Total quantity exceeds available stock!\");\r\n          return prevCart;\r\n        }\r\n        updatedItem.sellQuantity += sellQuantity;\r\n        const newCart = [...prevCart];\r\n        newCart[index] = updatedItem;\r\n        return newCart;\r\n      } else {\r\n        return [\r\n          ...prevCart,\r\n          {\r\n            barcode,\r\n            productName,\r\n            availableQuantity,\r\n            price: pricePerUnit,\r\n            sellQuantity,\r\n            docRef: currentDocRef,\r\n          },\r\n        ];\r\n      }\r\n    });\r\n    toast.success(\"Product added to cart!\");\r\n    // Reset current product state, but keep cart intact\r\n    resetCurrentProduct();\r\n  };\r\n\r\n  // Process sale for all products in the cart\r\n  const handleSellAll = async () => {\r\n    if (cart.length === 0) {\r\n      toast.error(\"No products in cart to sell.\");\r\n      return;\r\n    }\r\n    let receiptProducts = [];\r\n    let totalBill = 0;\r\n    try {\r\n      for (const item of cart) {\r\n        const productsRef = collection(db, \"inventory\");\r\n        const querySnapshot = await getDocs(productsRef);\r\n        let productDoc = null;\r\n        querySnapshot.forEach((docSnapshot) => {\r\n          const data = docSnapshot.data();\r\n          if (data && data.barcode === item.barcode) {\r\n            productDoc = docSnapshot;\r\n          }\r\n        });\r\n        if (!productDoc) {\r\n          toast.error(`Product ${item.productName} not found in inventory!`);\r\n          continue;\r\n        }\r\n        const currentQty = productDoc.data().quantity || 0;\r\n        if (item.sellQuantity > currentQty) {\r\n          toast.error(`Insufficient stock for ${item.productName}!`);\r\n          continue;\r\n        }\r\n        const newQuantity = currentQty - item.sellQuantity;\r\n        await updateDoc(productDoc.ref, { quantity: newQuantity });\r\n        const subtotal = item.sellQuantity * item.price;\r\n        receiptProducts.push({\r\n          productName: item.productName,\r\n          sellQuantity: item.sellQuantity,\r\n          price: item.price,\r\n          subtotal,\r\n        });\r\n        totalBill += subtotal;\r\n      }\r\n      const receipt = {\r\n        products: receiptProducts,\r\n        total: totalBill,\r\n        timestamp: new Date(),\r\n      };\r\n      setReceiptData(receipt);\r\n      setReceiptVisible(true);\r\n      toast.success(\"Sale completed successfully!\");\r\n      setCart([]); // clear cart after sale\r\n      setTimeout(resetPage, 3000);\r\n    } catch (error) {\r\n      console.error(\"Error processing multi-product sale:\", error);\r\n      toast.error(\"Error processing sale: \" + error.message);\r\n    }\r\n  };\r\n\r\n  // Save receipt as a text file\r\n  const handleSaveReceipt = () => {\r\n    if (!receiptData) return;\r\n    let receiptText = \"Sale Receipt\\n\\n\";\r\n    receiptData.products.forEach((item) => {\r\n      receiptText += `Product: ${item.productName}\\n`;\r\n      receiptText += `Quantity: ${item.sellQuantity}\\n`;\r\n      receiptText += `Price per unit: ${item.price}\\n`;\r\n      receiptText += `Subtotal: ${item.subtotal}\\n\\n`;\r\n    });\r\n    receiptText += `Total Bill: ${receiptData.total}\\n`;\r\n    receiptText += `Timestamp: ${new Date(receiptData.timestamp).toLocaleString()}\\n`;\r\n    \r\n    const blob = new Blob([receiptText], { type: \"text/plain;charset=utf-8\" });\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"receipt.txt\";\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen\" style={{ fontFamily: \"Arvo\" }}>\r\n      {/* Header Section */}\r\n      <header className=\"bg-blue-700 text-white py-4 px-6 flex items-center\">\r\n        <img\r\n          src=\"/logo.ico\"\r\n          alt=\"Logo\"\r\n          className=\"w-10 h-10 mr-4 object-contain\"\r\n        />\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold uppercase\">ShopKeeper</h1>\r\n          <p className=\"text-sm\">Scan to Sell - Sell your products</p>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Body Section */}\r\n      <main className=\"bg-white-100 flex flex-col items-center py-10\">\r\n        <div id=\"barcode-scanner-sell\" className=\"w-80 h-60 bg-black mb-4\"></div>\r\n        {barcode && !confirmVisible && (\r\n          <p className=\"mb-2 text-lg\">Scanned Barcode: {barcode}</p>\r\n        )}\r\n\r\n        {/* Confirmation Modal for current product */}\r\n        {confirmVisible && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center z-50 backdrop-blur-md\">\r\n            <div className=\"bg-white p-6 rounded shadow-lg w-80\">\r\n              <h2 className=\"text-xl font-bold mb-2\">Confirm Product</h2>\r\n              <p className=\"mb-1\">Product: {productName}</p>\r\n              <p className=\"mb-1\">Available: {availableQuantity}</p>\r\n              <p className=\"mb-1\">Price per unit: {pricePerUnit}</p>\r\n              <input\r\n                type=\"number\"\r\n                placeholder=\"Enter quantity to sell\"\r\n                value={sellQuantity}\r\n                onChange={(e) => setSellQuantity(Number(e.target.value))}\r\n                className=\"p-2 border rounded mb-2\"\r\n                min=\"1\"\r\n                max={availableQuantity}\r\n              />\r\n              <div className=\"flex justify-end gap-2\">\r\n                <button\r\n                  onClick={handleConfirmSale}\r\n                  className=\"px-3 py-1 bg-green-500 text-white rounded\"\r\n                >\r\n                  Confirm Sale\r\n                </button>\r\n                <button\r\n                  onClick={handleAddToCart}\r\n                  className=\"px-3 py-1 bg-blue-500 text-white rounded\"\r\n                >\r\n                  Add Product\r\n                </button>\r\n                <button\r\n                  onClick={resetCurrentProduct}\r\n                  className=\"px-3 py-1 bg-gray-500 text-white rounded\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Persistent Cart Section */}\r\n        {cart.length > 0 && (\r\n          <div className=\"w-80 bg-white p-4 rounded shadow mt-4\">\r\n            <h2 className=\"text-xl font-bold mb-2\">Cart</h2>\r\n            {cart.map((item, index) => (\r\n              <div key={index} className=\"mb-2 border-b pb-1\">\r\n                <p>{item.productName}</p>\r\n                <p>\r\n                  Quantity: {item.sellQuantity} | Price per unit: {item.price} | Subtotal:{\" \"}\r\n                  {item.sellQuantity * item.price}\r\n                </p>\r\n              </div>\r\n            ))}\r\n            <button\r\n              onClick={handleSellAll}\r\n              className=\"mt-2 w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\r\n            >\r\n              Sell All\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        {/* Receipt Modal */}\r\n        {receiptVisible && receiptData && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center z-50 backdrop-blur-md\">\r\n            <div className=\"bg-white p-6 rounded shadow-lg w-80\">\r\n              <h2 className=\"text-xl font-bold mb-2\">Sale Receipt</h2>\r\n              {receiptData.products.map((item, index) => (\r\n                <div key={index} className=\"mb-2 border-b pb-1\">\r\n                  <p>{item.productName}</p>\r\n                  <p>\r\n                    Quantity: {item.sellQuantity} | Price per unit: {item.price} | Subtotal:{\" \"}\r\n                    {item.subtotal}\r\n                  </p>\r\n                </div>\r\n              ))}\r\n              <p className=\"font-bold\">Total Bill: {receiptData.total}</p>\r\n              <div className=\"flex justify-end gap-2 mt-2\">\r\n                <button\r\n                  onClick={handleSaveReceipt}\r\n                  className=\"px-3 py-1 bg-blue-500 text-white rounded\"\r\n                >\r\n                  Save Receipt\r\n                </button>\r\n                <button\r\n                  onClick={resetPage}\r\n                  className=\"px-3 py-1 bg-gray-500 text-white rounded\"\r\n                >\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScanSellPage;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}